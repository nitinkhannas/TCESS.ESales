//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace TCESS.ESales.PersistenceLayer.Entity
{
    public partial class bookingmode : EntityBase
    {
        #region Primitive Properties
    
        public virtual int BookingMode_Id
        {
            get;
            set;
        }
    
        public virtual string BookingMode_Name
        {
            get;
            set;
        }
    
        public virtual int BookingMode_Group
        {
            get;
            set;
        }
    
        public virtual int BookinMode_AddDays
        {
            get;
            set;
        }
    
        public virtual bool BookingMode_IsExpirable
        {
            get;
            set;
        }
    
        public virtual int BookingMode_CreatedBy
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> BookingMode_CreatedDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> BookingMode_LastUpdatedDate
        {
            get;
            set;
        }
    
        public virtual bool BookingMode_IsDeleted
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<booking> bookings
        {
            get
            {
                if (_bookings == null)
                {
                    var newCollection = new FixupCollection<booking>();
                    newCollection.CollectionChanged += Fixupbookings;
                    _bookings = newCollection;
                }
                return _bookings;
            }
            set
            {
                if (!ReferenceEquals(_bookings, value))
                {
                    var previousValue = _bookings as FixupCollection<booking>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupbookings;
                    }
                    _bookings = value;
                    var newValue = value as FixupCollection<booking>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupbookings;
                    }
                }
            }
        }
        private ICollection<booking> _bookings;
    
        public virtual ICollection<bookingmodedetail> bookingmodedetails
        {
            get
            {
                if (_bookingmodedetails == null)
                {
                    var newCollection = new FixupCollection<bookingmodedetail>();
                    newCollection.CollectionChanged += Fixupbookingmodedetails;
                    _bookingmodedetails = newCollection;
                }
                return _bookingmodedetails;
            }
            set
            {
                if (!ReferenceEquals(_bookingmodedetails, value))
                {
                    var previousValue = _bookingmodedetails as FixupCollection<bookingmodedetail>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupbookingmodedetails;
                    }
                    _bookingmodedetails = value;
                    var newValue = value as FixupCollection<bookingmodedetail>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupbookingmodedetails;
                    }
                }
            }
        }
        private ICollection<bookingmodedetail> _bookingmodedetails;

        #endregion
        #region Association Fixup
    
        private void Fixupbookings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (booking item in e.NewItems)
                {
                    item.bookingmode = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (booking item in e.OldItems)
                {
                    if (ReferenceEquals(item.bookingmode, this))
                    {
                        item.bookingmode = null;
                    }
                }
            }
        }
    
        private void Fixupbookingmodedetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (bookingmodedetail item in e.NewItems)
                {
                    item.bookingmode = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (bookingmodedetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.bookingmode, this))
                    {
                        item.bookingmode = null;
                    }
                }
            }
        }

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace TCESS.ESales.PersistenceLayer.Entity
{
    public partial class my_aspnet_users : EntityBase
    {
        #region Primitive Properties
    
        public virtual int id
        {
            get;
            set;
        }
    
        public virtual int applicationId
        {
            get;
            set;
        }
    
        public virtual string name
        {
            get;
            set;
        }
    
        public virtual bool isAnonymous
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> lastActivityDate
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<counter> counters
        {
            get
            {
                if (_counters == null)
                {
                    var newCollection = new FixupCollection<counter>();
                    newCollection.CollectionChanged += Fixupcounters;
                    _counters = newCollection;
                }
                return _counters;
            }
            set
            {
                if (!ReferenceEquals(_counters, value))
                {
                    var previousValue = _counters as FixupCollection<counter>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupcounters;
                    }
                    _counters = value;
                    var newValue = value as FixupCollection<counter>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupcounters;
                    }
                }
            }
        }
        private ICollection<counter> _counters;
    
        public virtual ICollection<useragentmapping> useragentmappings
        {
            get
            {
                if (_useragentmappings == null)
                {
                    var newCollection = new FixupCollection<useragentmapping>();
                    newCollection.CollectionChanged += Fixupuseragentmappings;
                    _useragentmappings = newCollection;
                }
                return _useragentmappings;
            }
            set
            {
                if (!ReferenceEquals(_useragentmappings, value))
                {
                    var previousValue = _useragentmappings as FixupCollection<useragentmapping>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupuseragentmappings;
                    }
                    _useragentmappings = value;
                    var newValue = value as FixupCollection<useragentmapping>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupuseragentmappings;
                    }
                }
            }
        }
        private ICollection<useragentmapping> _useragentmappings;
    
        public virtual ICollection<userpaymentmodemapping> userpaymentmodemappings
        {
            get
            {
                if (_userpaymentmodemappings == null)
                {
                    var newCollection = new FixupCollection<userpaymentmodemapping>();
                    newCollection.CollectionChanged += Fixupuserpaymentmodemappings;
                    _userpaymentmodemappings = newCollection;
                }
                return _userpaymentmodemappings;
            }
            set
            {
                if (!ReferenceEquals(_userpaymentmodemappings, value))
                {
                    var previousValue = _userpaymentmodemappings as FixupCollection<userpaymentmodemapping>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupuserpaymentmodemappings;
                    }
                    _userpaymentmodemappings = value;
                    var newValue = value as FixupCollection<userpaymentmodemapping>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupuserpaymentmodemappings;
                    }
                }
            }
        }
        private ICollection<userpaymentmodemapping> _userpaymentmodemappings;

        #endregion
        #region Association Fixup
    
        private void Fixupcounters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (counter item in e.NewItems)
                {
                    item.my_aspnet_users = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (counter item in e.OldItems)
                {
                    if (ReferenceEquals(item.my_aspnet_users, this))
                    {
                        item.my_aspnet_users = null;
                    }
                }
            }
        }
    
        private void Fixupuseragentmappings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (useragentmapping item in e.NewItems)
                {
                    item.my_aspnet_users = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (useragentmapping item in e.OldItems)
                {
                    if (ReferenceEquals(item.my_aspnet_users, this))
                    {
                        item.my_aspnet_users = null;
                    }
                }
            }
        }
    
        private void Fixupuserpaymentmodemappings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (userpaymentmodemapping item in e.NewItems)
                {
                    item.my_aspnet_users = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (userpaymentmodemapping item in e.OldItems)
                {
                    if (ReferenceEquals(item.my_aspnet_users, this))
                    {
                        item.my_aspnet_users = null;
                    }
                }
            }
        }

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace TCESS.ESales.PersistenceLayer.Entity
{
    public partial class truckcarrycapacity : EntityBase
    {
        #region Primitive Properties
    
        public virtual int TruckCC_Id
        {
            get;
            set;
        }
    
        public virtual string TruckCC_Value
        {
            get;
            set;
        }
    
        public virtual int TruckCC_CreatedBy
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> TruckCC_CreatedDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> TruckCC_LastUpdatedDate
        {
            get;
            set;
        }
    
        public virtual bool TruckCC_IsDeleted
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<truckmake> truckmakes
        {
            get
            {
                if (_truckmakes == null)
                {
                    var newCollection = new FixupCollection<truckmake>();
                    newCollection.CollectionChanged += Fixuptruckmakes;
                    _truckmakes = newCollection;
                }
                return _truckmakes;
            }
            set
            {
                if (!ReferenceEquals(_truckmakes, value))
                {
                    var previousValue = _truckmakes as FixupCollection<truckmake>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixuptruckmakes;
                    }
                    _truckmakes = value;
                    var newValue = value as FixupCollection<truckmake>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixuptruckmakes;
                    }
                }
            }
        }
        private ICollection<truckmake> _truckmakes;

        #endregion
        #region Association Fixup
    
        private void Fixuptruckmakes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (truckmake item in e.NewItems)
                {
                    item.truckcarrycapacity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (truckmake item in e.OldItems)
                {
                    if (ReferenceEquals(item.truckcarrycapacity, this))
                    {
                        item.truckcarrycapacity = null;
                    }
                }
            }
        }

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace TCESS.ESales.PersistenceLayer.Entity
{
    public partial class agentdetail : EntityBase
    {
        #region Primitive Properties
    
        public virtual int Agent_Id
        {
            get;
            set;
        }
    
        public virtual string Agent_TSLCode
        {
            get;
            set;
        }
    
        public virtual string Agent_ShortName
        {
            get;
            set;
        }
    
        public virtual string Agent_Name
        {
            get;
            set;
        }
    
        public virtual System.DateTime Agent_StartDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> Agent_ClosureDate
        {
            get;
            set;
        }
    
        public virtual string Agent_PanNumber
        {
            get;
            set;
        }
    
        public virtual string Agent_SalesTaxNumber
        {
            get;
            set;
        }
    
        public virtual string Agent_RegContactPerson
        {
            get;
            set;
        }
    
        public virtual string Agent_RegAddress
        {
            get;
            set;
        }
    
        public virtual int Agent_RegState
        {
            get { return _agent_RegState; }
            set
            {
                if (_agent_RegState != value)
                {
                    if (state != null && state.State_Id != value)
                    {
                        state = null;
                    }
                    _agent_RegState = value;
                }
            }
        }
        private int _agent_RegState;
    
        public virtual int Agent_RegDistrict
        {
            get { return _agent_RegDistrict; }
            set
            {
                if (_agent_RegDistrict != value)
                {
                    if (district != null && district.Dist_Id != value)
                    {
                        district = null;
                    }
                    _agent_RegDistrict = value;
                }
            }
        }
        private int _agent_RegDistrict;
    
        public virtual Nullable<int> Agent_RegPinCode
        {
            get;
            set;
        }
    
        public virtual string Agent_RegMobileNo
        {
            get;
            set;
        }
    
        public virtual string Agent_RegPhoneNo
        {
            get;
            set;
        }
    
        public virtual string Agent_RegEmail
        {
            get;
            set;
        }
    
        public virtual string Agent_LocalContactPerson
        {
            get;
            set;
        }
    
        public virtual string Agent_LocalAddress
        {
            get;
            set;
        }
    
        public virtual Nullable<int> Agent_LocalState
        {
            get;
            set;
        }
    
        public virtual Nullable<int> Agent_LocalDistrict
        {
            get;
            set;
        }
    
        public virtual Nullable<int> Agent_LocalPinCode
        {
            get;
            set;
        }
    
        public virtual string Agent_LocalMobileNo
        {
            get;
            set;
        }
    
        public virtual string Agent_LocalPhoneNo
        {
            get;
            set;
        }
    
        public virtual string Agent_LocalEmail
        {
            get;
            set;
        }
    
        public virtual string Agent_ComContactPerson
        {
            get;
            set;
        }
    
        public virtual string Agent_ComAddress
        {
            get;
            set;
        }
    
        public virtual Nullable<int> Agent_ComState
        {
            get;
            set;
        }
    
        public virtual Nullable<int> Agent_ComDistrict
        {
            get;
            set;
        }
    
        public virtual Nullable<int> Agent_ComPinCode
        {
            get;
            set;
        }
    
        public virtual string Agent_ComMobileNo
        {
            get;
            set;
        }
    
        public virtual string Agent_ComPhoneNo
        {
            get;
            set;
        }
    
        public virtual string Agent_ComEmail
        {
            get;
            set;
        }
    
        public virtual int Agent_CreatedBy
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> Agent_CreatedDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> Agent_LastUpdatedDate
        {
            get;
            set;
        }
    
        public virtual bool Agent_IsDeleted
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual district district
        {
            get { return _district; }
            set
            {
                if (!ReferenceEquals(_district, value))
                {
                    var previousValue = _district;
                    _district = value;
                    Fixupdistrict(previousValue);
                }
            }
        }
        private district _district;
    
        public virtual state state
        {
            get { return _state; }
            set
            {
                if (!ReferenceEquals(_state, value))
                {
                    var previousValue = _state;
                    _state = value;
                    Fixupstate(previousValue);
                }
            }
        }
        private state _state;
    
        public virtual ICollection<agentmaterialpercentage> agentmaterialpercentages
        {
            get
            {
                if (_agentmaterialpercentages == null)
                {
                    var newCollection = new FixupCollection<agentmaterialpercentage>();
                    newCollection.CollectionChanged += Fixupagentmaterialpercentages;
                    _agentmaterialpercentages = newCollection;
                }
                return _agentmaterialpercentages;
            }
            set
            {
                if (!ReferenceEquals(_agentmaterialpercentages, value))
                {
                    var previousValue = _agentmaterialpercentages as FixupCollection<agentmaterialpercentage>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupagentmaterialpercentages;
                    }
                    _agentmaterialpercentages = value;
                    var newValue = value as FixupCollection<agentmaterialpercentage>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupagentmaterialpercentages;
                    }
                }
            }
        }
        private ICollection<agentmaterialpercentage> _agentmaterialpercentages;
    
        public virtual ICollection<counter> counters
        {
            get
            {
                if (_counters == null)
                {
                    var newCollection = new FixupCollection<counter>();
                    newCollection.CollectionChanged += Fixupcounters;
                    _counters = newCollection;
                }
                return _counters;
            }
            set
            {
                if (!ReferenceEquals(_counters, value))
                {
                    var previousValue = _counters as FixupCollection<counter>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupcounters;
                    }
                    _counters = value;
                    var newValue = value as FixupCollection<counter>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupcounters;
                    }
                }
            }
        }
        private ICollection<counter> _counters;
    
        public virtual ICollection<counterdetail> counterdetails
        {
            get
            {
                if (_counterdetails == null)
                {
                    var newCollection = new FixupCollection<counterdetail>();
                    newCollection.CollectionChanged += Fixupcounterdetails;
                    _counterdetails = newCollection;
                }
                return _counterdetails;
            }
            set
            {
                if (!ReferenceEquals(_counterdetails, value))
                {
                    var previousValue = _counterdetails as FixupCollection<counterdetail>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupcounterdetails;
                    }
                    _counterdetails = value;
                    var newValue = value as FixupCollection<counterdetail>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupcounterdetails;
                    }
                }
            }
        }
        private ICollection<counterdetail> _counterdetails;
    
        public virtual ICollection<dcamaterialallocation> dcamaterialallocations
        {
            get
            {
                if (_dcamaterialallocations == null)
                {
                    var newCollection = new FixupCollection<dcamaterialallocation>();
                    newCollection.CollectionChanged += Fixupdcamaterialallocations;
                    _dcamaterialallocations = newCollection;
                }
                return _dcamaterialallocations;
            }
            set
            {
                if (!ReferenceEquals(_dcamaterialallocations, value))
                {
                    var previousValue = _dcamaterialallocations as FixupCollection<dcamaterialallocation>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupdcamaterialallocations;
                    }
                    _dcamaterialallocations = value;
                    var newValue = value as FixupCollection<dcamaterialallocation>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupdcamaterialallocations;
                    }
                }
            }
        }
        private ICollection<dcamaterialallocation> _dcamaterialallocations;
    
        public virtual ICollection<useragentmapping> useragentmappings
        {
            get
            {
                if (_useragentmappings == null)
                {
                    var newCollection = new FixupCollection<useragentmapping>();
                    newCollection.CollectionChanged += Fixupuseragentmappings;
                    _useragentmappings = newCollection;
                }
                return _useragentmappings;
            }
            set
            {
                if (!ReferenceEquals(_useragentmappings, value))
                {
                    var previousValue = _useragentmappings as FixupCollection<useragentmapping>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupuseragentmappings;
                    }
                    _useragentmappings = value;
                    var newValue = value as FixupCollection<useragentmapping>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupuseragentmappings;
                    }
                }
            }
        }
        private ICollection<useragentmapping> _useragentmappings;
    
        public virtual ICollection<booking> bookings
        {
            get
            {
                if (_bookings == null)
                {
                    var newCollection = new FixupCollection<booking>();
                    newCollection.CollectionChanged += Fixupbookings;
                    _bookings = newCollection;
                }
                return _bookings;
            }
            set
            {
                if (!ReferenceEquals(_bookings, value))
                {
                    var previousValue = _bookings as FixupCollection<booking>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupbookings;
                    }
                    _bookings = value;
                    var newValue = value as FixupCollection<booking>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupbookings;
                    }
                }
            }
        }
        private ICollection<booking> _bookings;

        #endregion
        #region Association Fixup
    
        private void Fixupdistrict(district previousValue)
        {
            if (previousValue != null && previousValue.agentdetails.Contains(this))
            {
                previousValue.agentdetails.Remove(this);
            }
    
            if (district != null)
            {
                if (!district.agentdetails.Contains(this))
                {
                    district.agentdetails.Add(this);
                }
                if (Agent_RegDistrict != district.Dist_Id)
                {
                    Agent_RegDistrict = district.Dist_Id;
                }
            }
        }
    
        private void Fixupstate(state previousValue)
        {
            if (previousValue != null && previousValue.agentdetails.Contains(this))
            {
                previousValue.agentdetails.Remove(this);
            }
    
            if (state != null)
            {
                if (!state.agentdetails.Contains(this))
                {
                    state.agentdetails.Add(this);
                }
                if (Agent_RegState != state.State_Id)
                {
                    Agent_RegState = state.State_Id;
                }
            }
        }
    
        private void Fixupagentmaterialpercentages(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (agentmaterialpercentage item in e.NewItems)
                {
                    item.agentdetail = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (agentmaterialpercentage item in e.OldItems)
                {
                    if (ReferenceEquals(item.agentdetail, this))
                    {
                        item.agentdetail = null;
                    }
                }
            }
        }
    
        private void Fixupcounters(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (counter item in e.NewItems)
                {
                    item.agentdetail = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (counter item in e.OldItems)
                {
                    if (ReferenceEquals(item.agentdetail, this))
                    {
                        item.agentdetail = null;
                    }
                }
            }
        }
    
        private void Fixupcounterdetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (counterdetail item in e.NewItems)
                {
                    item.agentdetail = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (counterdetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.agentdetail, this))
                    {
                        item.agentdetail = null;
                    }
                }
            }
        }
    
        private void Fixupdcamaterialallocations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (dcamaterialallocation item in e.NewItems)
                {
                    item.agentdetail = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (dcamaterialallocation item in e.OldItems)
                {
                    if (ReferenceEquals(item.agentdetail, this))
                    {
                        item.agentdetail = null;
                    }
                }
            }
        }
    
        private void Fixupuseragentmappings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (useragentmapping item in e.NewItems)
                {
                    item.agentdetail = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (useragentmapping item in e.OldItems)
                {
                    if (ReferenceEquals(item.agentdetail, this))
                    {
                        item.agentdetail = null;
                    }
                }
            }
        }
    
        private void Fixupbookings(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (booking item in e.NewItems)
                {
                    item.agentdetail = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (booking item in e.OldItems)
                {
                    if (ReferenceEquals(item.agentdetail, this))
                    {
                        item.agentdetail = null;
                    }
                }
            }
        }

        #endregion
    }
}

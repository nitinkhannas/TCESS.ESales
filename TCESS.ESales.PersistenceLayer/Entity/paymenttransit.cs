//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace TCESS.ESales.PersistenceLayer.Entity
{
    public partial class paymenttransit : EntityBase
    {
        #region Primitive Properties
    
        public virtual int PaymentTransit_Id
        {
            get;
            set;
        }
    
        public virtual int PaymentTransit_CollectionId
        {
            get { return _paymentTransit_CollectionId; }
            set
            {
                if (_paymentTransit_CollectionId != value)
                {
                    if (paymentcollection != null && paymentcollection.PC_Id != value)
                    {
                        paymentcollection = null;
                    }
                    _paymentTransit_CollectionId = value;
                }
            }
        }
        private int _paymentTransit_CollectionId;
    
        public virtual int PaymentTransit_BatchId
        {
            get { return _paymentTransit_BatchId; }
            set
            {
                if (_paymentTransit_BatchId != value)
                {
                    if (batchtransfer != null && batchtransfer.BT_ID != value)
                    {
                        batchtransfer = null;
                    }
                    _paymentTransit_BatchId = value;
                }
            }
        }
        private int _paymentTransit_BatchId;
    
        public virtual Nullable<int> PaymentTransit_CreatedBy
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> PaymentTransit_CreatedDate
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual batchtransfer batchtransfer
        {
            get { return _batchtransfer; }
            set
            {
                if (!ReferenceEquals(_batchtransfer, value))
                {
                    var previousValue = _batchtransfer;
                    _batchtransfer = value;
                    Fixupbatchtransfer(previousValue);
                }
            }
        }
        private batchtransfer _batchtransfer;
    
        public virtual paymentcollection paymentcollection
        {
            get { return _paymentcollection; }
            set
            {
                if (!ReferenceEquals(_paymentcollection, value))
                {
                    var previousValue = _paymentcollection;
                    _paymentcollection = value;
                    Fixuppaymentcollection(previousValue);
                }
            }
        }
        private paymentcollection _paymentcollection;
    
        public virtual ICollection<smspaymentregistration> smspaymentregistrations
        {
            get
            {
                if (_smspaymentregistrations == null)
                {
                    var newCollection = new FixupCollection<smspaymentregistration>();
                    newCollection.CollectionChanged += Fixupsmspaymentregistrations;
                    _smspaymentregistrations = newCollection;
                }
                return _smspaymentregistrations;
            }
            set
            {
                if (!ReferenceEquals(_smspaymentregistrations, value))
                {
                    var previousValue = _smspaymentregistrations as FixupCollection<smspaymentregistration>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupsmspaymentregistrations;
                    }
                    _smspaymentregistrations = value;
                    var newValue = value as FixupCollection<smspaymentregistration>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupsmspaymentregistrations;
                    }
                }
            }
        }
        private ICollection<smspaymentregistration> _smspaymentregistrations;

        #endregion
        #region Association Fixup
    
        private void Fixupbatchtransfer(batchtransfer previousValue)
        {
            if (previousValue != null && previousValue.paymenttransits.Contains(this))
            {
                previousValue.paymenttransits.Remove(this);
            }
    
            if (batchtransfer != null)
            {
                if (!batchtransfer.paymenttransits.Contains(this))
                {
                    batchtransfer.paymenttransits.Add(this);
                }
                if (PaymentTransit_BatchId != batchtransfer.BT_ID)
                {
                    PaymentTransit_BatchId = batchtransfer.BT_ID;
                }
            }
        }
    
        private void Fixuppaymentcollection(paymentcollection previousValue)
        {
            if (previousValue != null && previousValue.paymenttransits.Contains(this))
            {
                previousValue.paymenttransits.Remove(this);
            }
    
            if (paymentcollection != null)
            {
                if (!paymentcollection.paymenttransits.Contains(this))
                {
                    paymentcollection.paymenttransits.Add(this);
                }
                if (PaymentTransit_CollectionId != paymentcollection.PC_Id)
                {
                    PaymentTransit_CollectionId = paymentcollection.PC_Id;
                }
            }
        }
    
        private void Fixupsmspaymentregistrations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (smspaymentregistration item in e.NewItems)
                {
                    item.paymenttransit = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (smspaymentregistration item in e.OldItems)
                {
                    if (ReferenceEquals(item.paymenttransit, this))
                    {
                        item.paymenttransit = null;
                    }
                }
            }
        }

        #endregion
    }
}

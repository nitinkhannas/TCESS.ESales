//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace TCESS.ESales.PersistenceLayer.Entity
{
    public partial class truckregtype : EntityBase
    {
        #region Primitive Properties
    
        public virtual int TruckRegType_Id
        {
            get;
            set;
        }
    
        public virtual string TruckRegType_Name
        {
            get;
            set;
        }
    
        public virtual int TruckRegType_CreatedBy
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> TruckRegType_CreatedDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> TruckRegType_LastUpdatedDate
        {
            get;
            set;
        }
    
        public virtual bool TruckRegType_IsDeleted
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<liftinglimit> liftinglimits
        {
            get
            {
                if (_liftinglimits == null)
                {
                    var newCollection = new FixupCollection<liftinglimit>();
                    newCollection.CollectionChanged += Fixupliftinglimits;
                    _liftinglimits = newCollection;
                }
                return _liftinglimits;
            }
            set
            {
                if (!ReferenceEquals(_liftinglimits, value))
                {
                    var previousValue = _liftinglimits as FixupCollection<liftinglimit>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupliftinglimits;
                    }
                    _liftinglimits = value;
                    var newValue = value as FixupCollection<liftinglimit>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupliftinglimits;
                    }
                }
            }
        }
        private ICollection<liftinglimit> _liftinglimits;
    
        public virtual ICollection<liftinglimit_history> liftinglimit_history
        {
            get
            {
                if (_liftinglimit_history == null)
                {
                    var newCollection = new FixupCollection<liftinglimit_history>();
                    newCollection.CollectionChanged += Fixupliftinglimit_history;
                    _liftinglimit_history = newCollection;
                }
                return _liftinglimit_history;
            }
            set
            {
                if (!ReferenceEquals(_liftinglimit_history, value))
                {
                    var previousValue = _liftinglimit_history as FixupCollection<liftinglimit_history>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupliftinglimit_history;
                    }
                    _liftinglimit_history = value;
                    var newValue = value as FixupCollection<liftinglimit_history>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupliftinglimit_history;
                    }
                }
            }
        }
        private ICollection<liftinglimit_history> _liftinglimit_history;
    
        public virtual ICollection<standalonetruck> standalonetrucks
        {
            get
            {
                if (_standalonetrucks == null)
                {
                    var newCollection = new FixupCollection<standalonetruck>();
                    newCollection.CollectionChanged += Fixupstandalonetrucks;
                    _standalonetrucks = newCollection;
                }
                return _standalonetrucks;
            }
            set
            {
                if (!ReferenceEquals(_standalonetrucks, value))
                {
                    var previousValue = _standalonetrucks as FixupCollection<standalonetruck>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupstandalonetrucks;
                    }
                    _standalonetrucks = value;
                    var newValue = value as FixupCollection<standalonetruck>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupstandalonetrucks;
                    }
                }
            }
        }
        private ICollection<standalonetruck> _standalonetrucks;
    
        public virtual ICollection<truckdetail> truckdetails
        {
            get
            {
                if (_truckdetails == null)
                {
                    var newCollection = new FixupCollection<truckdetail>();
                    newCollection.CollectionChanged += Fixuptruckdetails;
                    _truckdetails = newCollection;
                }
                return _truckdetails;
            }
            set
            {
                if (!ReferenceEquals(_truckdetails, value))
                {
                    var previousValue = _truckdetails as FixupCollection<truckdetail>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixuptruckdetails;
                    }
                    _truckdetails = value;
                    var newValue = value as FixupCollection<truckdetail>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixuptruckdetails;
                    }
                }
            }
        }
        private ICollection<truckdetail> _truckdetails;

        #endregion
        #region Association Fixup
    
        private void Fixupliftinglimits(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (liftinglimit item in e.NewItems)
                {
                    item.truckregtype = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (liftinglimit item in e.OldItems)
                {
                    if (ReferenceEquals(item.truckregtype, this))
                    {
                        item.truckregtype = null;
                    }
                }
            }
        }
    
        private void Fixupliftinglimit_history(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (liftinglimit_history item in e.NewItems)
                {
                    item.truckregtype = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (liftinglimit_history item in e.OldItems)
                {
                    if (ReferenceEquals(item.truckregtype, this))
                    {
                        item.truckregtype = null;
                    }
                }
            }
        }
    
        private void Fixupstandalonetrucks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (standalonetruck item in e.NewItems)
                {
                    item.truckregtype = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (standalonetruck item in e.OldItems)
                {
                    if (ReferenceEquals(item.truckregtype, this))
                    {
                        item.truckregtype = null;
                    }
                }
            }
        }
    
        private void Fixuptruckdetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (truckdetail item in e.NewItems)
                {
                    item.truckregtype = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (truckdetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.truckregtype, this))
                    {
                        item.truckregtype = null;
                    }
                }
            }
        }

        #endregion
    }
}

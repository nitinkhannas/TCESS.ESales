//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace TCESS.ESales.PersistenceLayer.Entity
{
    public partial class authrepdetail : EntityBase
    {
        #region Primitive Properties
    
        public virtual int AuthRep_Id
        {
            get;
            set;
        }
    
        public virtual int AuthRep_CustomerId
        {
            get { return _authRep_CustomerId; }
            set
            {
                if (_authRep_CustomerId != value)
                {
                    if (customer != null && customer.Cust_Id != value)
                    {
                        customer = null;
                    }
                    _authRep_CustomerId = value;
                }
            }
        }
        private int _authRep_CustomerId;
    
        public virtual string AuthRep_Name
        {
            get;
            set;
        }
    
        public virtual string AuthRep_FatherName
        {
            get;
            set;
        }
    
        public virtual string AuthRep_Address
        {
            get;
            set;
        }
    
        public virtual string AuthRep_Mobile
        {
            get;
            set;
        }
    
        public virtual bool AuthRep_IsBlacklisted
        {
            get;
            set;
        }
    
        public virtual string AuthRep_BlacklistedBy
        {
            get;
            set;
        }
    
        public virtual int AuthRep_CreatedBy
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> AuthRep_CreatedDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> AuthRep_LastUpdatedDate
        {
            get;
            set;
        }
    
        public virtual bool AuthRep_IsDeleted
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<authrepdocdetail> authrepdocdetails
        {
            get
            {
                if (_authrepdocdetails == null)
                {
                    var newCollection = new FixupCollection<authrepdocdetail>();
                    newCollection.CollectionChanged += Fixupauthrepdocdetails;
                    _authrepdocdetails = newCollection;
                }
                return _authrepdocdetails;
            }
            set
            {
                if (!ReferenceEquals(_authrepdocdetails, value))
                {
                    var previousValue = _authrepdocdetails as FixupCollection<authrepdocdetail>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupauthrepdocdetails;
                    }
                    _authrepdocdetails = value;
                    var newValue = value as FixupCollection<authrepdocdetail>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupauthrepdocdetails;
                    }
                }
            }
        }
        private ICollection<authrepdocdetail> _authrepdocdetails;
    
        public virtual customer customer
        {
            get { return _customer; }
            set
            {
                if (!ReferenceEquals(_customer, value))
                {
                    var previousValue = _customer;
                    _customer = value;
                    Fixupcustomer(previousValue);
                }
            }
        }
        private customer _customer;

        #endregion
        #region Association Fixup
    
        private void Fixupcustomer(customer previousValue)
        {
            if (previousValue != null && previousValue.authrepdetails.Contains(this))
            {
                previousValue.authrepdetails.Remove(this);
            }
    
            if (customer != null)
            {
                if (!customer.authrepdetails.Contains(this))
                {
                    customer.authrepdetails.Add(this);
                }
                if (AuthRep_CustomerId != customer.Cust_Id)
                {
                    AuthRep_CustomerId = customer.Cust_Id;
                }
            }
        }
    
        private void Fixupauthrepdocdetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (authrepdocdetail item in e.NewItems)
                {
                    item.authrepdetail = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (authrepdocdetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.authrepdetail, this))
                    {
                        item.authrepdetail = null;
                    }
                }
            }
        }

        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace TCESS.ESales.PersistenceLayer.Entity
{
    public partial class doctype : EntityBase
    {
        #region Primitive Properties
    
        public virtual int Doc_Id
        {
            get;
            set;
        }
    
        public virtual string Doc_Name
        {
            get;
            set;
        }
    
        public virtual string Doc_Acronym
        {
            get;
            set;
        }
    
        public virtual int Doc_Group
        {
            get;
            set;
        }
    
        public virtual bool Doc_Mandatory
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> Doc_IsUnique
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> Doc_IsGhatoCollection
        {
            get;
            set;
        }
    
        public virtual int Doc_CreatedBy
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> Doc_CreatedDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> Doc_LastUpdatedDate
        {
            get;
            set;
        }
    
        public virtual bool Doc_IsDeleted
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<authrepdocdetail> authrepdocdetails
        {
            get
            {
                if (_authrepdocdetails == null)
                {
                    var newCollection = new FixupCollection<authrepdocdetail>();
                    newCollection.CollectionChanged += Fixupauthrepdocdetails;
                    _authrepdocdetails = newCollection;
                }
                return _authrepdocdetails;
            }
            set
            {
                if (!ReferenceEquals(_authrepdocdetails, value))
                {
                    var previousValue = _authrepdocdetails as FixupCollection<authrepdocdetail>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupauthrepdocdetails;
                    }
                    _authrepdocdetails = value;
                    var newValue = value as FixupCollection<authrepdocdetail>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupauthrepdocdetails;
                    }
                }
            }
        }
        private ICollection<authrepdocdetail> _authrepdocdetails;
    
        public virtual ICollection<customerdocdetail> customerdocdetails
        {
            get
            {
                if (_customerdocdetails == null)
                {
                    var newCollection = new FixupCollection<customerdocdetail>();
                    newCollection.CollectionChanged += Fixupcustomerdocdetails;
                    _customerdocdetails = newCollection;
                }
                return _customerdocdetails;
            }
            set
            {
                if (!ReferenceEquals(_customerdocdetails, value))
                {
                    var previousValue = _customerdocdetails as FixupCollection<customerdocdetail>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupcustomerdocdetails;
                    }
                    _customerdocdetails = value;
                    var newValue = value as FixupCollection<customerdocdetail>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupcustomerdocdetails;
                    }
                }
            }
        }
        private ICollection<customerdocdetail> _customerdocdetails;
    
        public virtual ICollection<standalonetruckdocdetail> standalonetruckdocdetails
        {
            get
            {
                if (_standalonetruckdocdetails == null)
                {
                    var newCollection = new FixupCollection<standalonetruckdocdetail>();
                    newCollection.CollectionChanged += Fixupstandalonetruckdocdetails;
                    _standalonetruckdocdetails = newCollection;
                }
                return _standalonetruckdocdetails;
            }
            set
            {
                if (!ReferenceEquals(_standalonetruckdocdetails, value))
                {
                    var previousValue = _standalonetruckdocdetails as FixupCollection<standalonetruckdocdetail>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupstandalonetruckdocdetails;
                    }
                    _standalonetruckdocdetails = value;
                    var newValue = value as FixupCollection<standalonetruckdocdetail>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupstandalonetruckdocdetails;
                    }
                }
            }
        }
        private ICollection<standalonetruckdocdetail> _standalonetruckdocdetails;
    
        public virtual ICollection<truckdocdetail> truckdocdetails
        {
            get
            {
                if (_truckdocdetails == null)
                {
                    var newCollection = new FixupCollection<truckdocdetail>();
                    newCollection.CollectionChanged += Fixuptruckdocdetails;
                    _truckdocdetails = newCollection;
                }
                return _truckdocdetails;
            }
            set
            {
                if (!ReferenceEquals(_truckdocdetails, value))
                {
                    var previousValue = _truckdocdetails as FixupCollection<truckdocdetail>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixuptruckdocdetails;
                    }
                    _truckdocdetails = value;
                    var newValue = value as FixupCollection<truckdocdetail>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixuptruckdocdetails;
                    }
                }
            }
        }
        private ICollection<truckdocdetail> _truckdocdetails;

        #endregion
        #region Association Fixup
    
        private void Fixupauthrepdocdetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (authrepdocdetail item in e.NewItems)
                {
                    item.doctype = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (authrepdocdetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.doctype, this))
                    {
                        item.doctype = null;
                    }
                }
            }
        }
    
        private void Fixupcustomerdocdetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (customerdocdetail item in e.NewItems)
                {
                    item.doctype = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (customerdocdetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.doctype, this))
                    {
                        item.doctype = null;
                    }
                }
            }
        }
    
        private void Fixupstandalonetruckdocdetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (standalonetruckdocdetail item in e.NewItems)
                {
                    item.doctype = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (standalonetruckdocdetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.doctype, this))
                    {
                        item.doctype = null;
                    }
                }
            }
        }
    
        private void Fixuptruckdocdetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (truckdocdetail item in e.NewItems)
                {
                    item.doctype = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (truckdocdetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.doctype, this))
                    {
                        item.doctype = null;
                    }
                }
            }
        }

        #endregion
    }
}

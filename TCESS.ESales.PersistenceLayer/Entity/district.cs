//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace TCESS.ESales.PersistenceLayer.Entity
{
    public partial class district : EntityBase
    {
        #region Primitive Properties
    
        public virtual int Dist_Id
        {
            get;
            set;
        }
    
        public virtual string Dist_Name
        {
            get;
            set;
        }
    
        public virtual int Dist_StateId
        {
            get { return _dist_StateId; }
            set
            {
                if (_dist_StateId != value)
                {
                    if (state != null && state.State_Id != value)
                    {
                        state = null;
                    }
                    _dist_StateId = value;
                }
            }
        }
        private int _dist_StateId;
    
        public virtual int Dist_Createdby
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> Dist_CreatedDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> Dist_LastUpdatedDate
        {
            get;
            set;
        }
    
        public virtual bool Dist_IsDeleted
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<agentdetail> agentdetails
        {
            get
            {
                if (_agentdetails == null)
                {
                    var newCollection = new FixupCollection<agentdetail>();
                    newCollection.CollectionChanged += Fixupagentdetails;
                    _agentdetails = newCollection;
                }
                return _agentdetails;
            }
            set
            {
                if (!ReferenceEquals(_agentdetails, value))
                {
                    var previousValue = _agentdetails as FixupCollection<agentdetail>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupagentdetails;
                    }
                    _agentdetails = value;
                    var newValue = value as FixupCollection<agentdetail>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupagentdetails;
                    }
                }
            }
        }
        private ICollection<agentdetail> _agentdetails;
    
        public virtual ICollection<customer> customers
        {
            get
            {
                if (_customers == null)
                {
                    var newCollection = new FixupCollection<customer>();
                    newCollection.CollectionChanged += Fixupcustomers;
                    _customers = newCollection;
                }
                return _customers;
            }
            set
            {
                if (!ReferenceEquals(_customers, value))
                {
                    var previousValue = _customers as FixupCollection<customer>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupcustomers;
                    }
                    _customers = value;
                    var newValue = value as FixupCollection<customer>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupcustomers;
                    }
                }
            }
        }
        private ICollection<customer> _customers;
    
        public virtual state state
        {
            get { return _state; }
            set
            {
                if (!ReferenceEquals(_state, value))
                {
                    var previousValue = _state;
                    _state = value;
                    Fixupstate(previousValue);
                }
            }
        }
        private state _state;

        #endregion
        #region Association Fixup
    
        private void Fixupstate(state previousValue)
        {
            if (previousValue != null && previousValue.districts.Contains(this))
            {
                previousValue.districts.Remove(this);
            }
    
            if (state != null)
            {
                if (!state.districts.Contains(this))
                {
                    state.districts.Add(this);
                }
                if (Dist_StateId != state.State_Id)
                {
                    Dist_StateId = state.State_Id;
                }
            }
        }
    
        private void Fixupagentdetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (agentdetail item in e.NewItems)
                {
                    item.district = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (agentdetail item in e.OldItems)
                {
                    if (ReferenceEquals(item.district, this))
                    {
                        item.district = null;
                    }
                }
            }
        }
    
        private void Fixupcustomers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (customer item in e.NewItems)
                {
                    item.district = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (customer item in e.OldItems)
                {
                    if (ReferenceEquals(item.district, this))
                    {
                        item.district = null;
                    }
                }
            }
        }

        #endregion
    }
}
